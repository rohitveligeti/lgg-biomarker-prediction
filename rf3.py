used_list = ['ALT_ARM20q', 'ALT_ARM20p', 'ALT_MUT_NF1', 'ALT_MUT_IDH1', 'ALT_CNA_LINC00864']

ulist = {'ALT_CNA_RELN': 0.003159496814493476, 'ALT_CNA_SEMA3E': 0.003191729316823619, 'ALT_MUT_USH2A': 0.0032307634970862955, 'ALT_CNA_NSUN3': 0.0032697715479317506, 'ALT_MUT_HERC2P3': 0.003335780941866773, 'ALT_CNA_AGBL4': 0.003339939182548409, 'ALT_CNA_MTAP': 0.0033927282731480045, 'ALT_CNA_DHFRL1': 0.003416157228372533, 'ALT_MUT_BAGE2': 0.003456725723078666, 'ALT_CNA_AGBL4-IT1': 0.00350174733772676, 'ALT_CNA_LRRN3': 0.00354432555970218, 'ALT_MUT_FRMPD4': 0.0035834649241704977, 'ALT_CNA_SCG5': 0.0036260196127072936, 'ALT_CNA_CYP2E1': 0.003629974557430707, 'ALT_CNA_AKAP13': 0.00364615967170579, 'ALT_ARM4p': 0.004145333757959921, 'ALT_MUT_DOCK8': 0.004582990969964384, 'ALT_MUT_ATRX': 0.004706282010839112, 'ALT_MUT_NPAP1': 0.004754006943694945, 'ALT_MUT_BCOR': 0.005373596104124539, 'ALT_CNA_LUZP6': 0.0055781104604352375, 'ALT_MUT_SCN10A': 0.0059942332343675235, 'ALT_ARM20q': 0.007725589984808929, 'preoperative_corticosteroids': 0.008440142477180834, 'headache_history': 0.009297889160807444, 'ALT_ARM20p': 0.011204270576991953, 'ALT_MUT_IDH1': 0.012380964273045844, 'ALT_MUT_NF1': 0.012389625911031012, 'RAGNUM_HYPOXIA_SCORE': 0.014516024798971683, 'karnofsky_performance_score': 0.017049062535148967, 'WINTER_HYPOXIA_SCORE': 0.024209357364230764, 'ALT_CNA_LINC00864': 0.02570955059314763, 'BUFFA_HYPOXIA_SCORE': 0.026880094551603083, 'eastern_cancer_oncology_group': 0.030507076841313076, 'age_at_initial_pathologic_diagnosis': 0.038671628537486666, 'year_of_initial_pathologic_diagnosis': 0.1316133805696521}
ul2 = list(ulist.keys())

uulist = {'ALT_CNA_MYZAP': 0.002011225098629642, 'ALT_CNA_ARHGEF9-IT1': 0.0020158790288415853, 'ALT_CNA_EPHA5-AS1': 0.002026993113435947, 'ALT_CNA_ATF7IP': 0.002028401302966618, 'ALT_CNA_CHMP2A': 0.0020376167530056924, 'ALT_CNA_CDKN2A': 0.002042550257882088, 'ALT_CNA_NKAIN2': 0.002043508447086875, 'ALT_MUT_TTN': 0.0020469353393435213, 'ALT_CNA_TOPORS': 0.0020497999370827865, 'ALT_CNA_DPY19L2P1': 0.002052843713977061, 'ALT_MUT_FRY': 0.00205915057056326, 'ALT_MUT_CIC': 0.0020723539525808543, 'ALT_CNA_GRM5P1': 0.002081328214006926, 'ALT_CNA_DDX6': 0.0020843434714258183, 'ALT_MUT_PTPRC': 0.002086654589381817, 'ALT_CNA_MIR548A2': 0.0020868744241491796, 'ALT_ARM9q': 0.0020879926315190444, 'ALT_CNA_SRGAP2D': 0.0020976975355790984, 'ALT_CNA_KDM4C': 0.002145841562502996, 'ALT_CNA_ENTPD3': 0.0021513840801896094, 'ALT_CNA_RNU6-53P': 0.0021661677586840857, 'ALT_CNA_CSMD1': 0.002168646814426202, 'ALT_CNA_TREH': 0.002195493971959605, 'ALT_CNA_UTS2B': 0.0021961187915859443, 'ALT_CNA_DPP6': 0.002205321387107427, 'ALT_CNA_ABL1': 0.002216528015792886, 'ALT_CNA_GIHCG': 0.0022179919948841593, 'ALT_CNA_AMER1': 0.0022189307724842264, 'ALT_CNA_OR51I2': 0.002236550073940023, 'ALT_CNA_RELN': 0.002254663429918127, 'ALT_MUT_ASPM': 0.0022743197491408903, 'ALT_CNA_OR4C12': 0.0022914686172374895, 'ALT_CNA_ZNF780A': 0.002331707070475824, 'ALT_CNA_PPIF': 0.0023502481413850513, 'ALT_CNA_OPN4': 0.00235853031513963, 'ALT_CNA_MB21D2': 0.0023820453977442895, 'ALT_CNA_ZNF497': 0.002386822252136795, 'ALT_CNA_CDKN2C': 0.0024361315536055002, 'ALT_CNA_TMEM39A': 0.0024594835432165223, 'ALT_CNA_ENTPD3-AS1': 0.0024826073965232534, 'ALT_CNA_ZNF479': 0.0024957584887814713, 'ALT_CNA_MIB1': 0.002528601113963274, 'ALT_CNA_HUWE1': 0.0025423391825607246, 'ALT_MUT_HCFC1': 0.002551606136906897, 'ALT_CNA_PLXNA4': 0.0025540577513756134, 'ALT_MUT_PIK3R1': 0.002577199005093789, 'ALT_CNA_PCAT19': 0.0025796087673486136, 'ALT_CNA_WAPAL': 0.0025969209979335786, 'ALT_CNA_PODXL': 0.0026012743286361454, 'ALT_CNA_LPHN3': 0.0026170733872310165, 'ALT_CNA_CNTN2': 0.002619462038085137, 'ALT_CNA_GINS1': 0.002621577203566078, 'ALT_CNA_IZUMO3': 0.0026260547707201314, 'ALT_CNA_MKNK1-AS1': 0.002671951795035419, 'ALT_CNA_TRPC6': 0.0026873536749205213, 'ALT_CNA_TBC1D2': 0.0027460477536938974, 'ALT_CNA_NAMA': 0.00277752960921686, 'ALT_CNA_UQCRH': 0.0027963720592031694, 'ALT_CNA_LRRN3': 0.0028210433336443115, 'ALT_MUT_ROS1': 0.0028251902331156388, 'ALT_CNA_NELL2': 0.002829704216286664, 'ALT_CNA_DHFRL1': 0.0029611198346190205, 'ALT_CNA_NAMPT': 0.002967588677476292, 'ALT_CNA_CYP2E1': 0.0030003796400390483, 'ALT_MUT_AHNAK2': 0.003019572252271583, 'ALT_CNA_MACROD2-AS1': 0.00314199552648447, 'ALT_CNA_GRID1-AS1': 0.0031544677773946957, 'ALT_CNA_AC009518.4': 0.003252187407550286, 'ALT_CNA_GRID1': 0.0033489004433029635, 'ALT_CNA_LSM8': 0.0033546493497607203, 'ALT_MUT_SPTBN5': 0.0033713389801408337, 'ALT_CNA_AKAP13': 0.003431884443519619, 'ALT_MUT_ATRX': 0.003503898461845241, 'ALT_MUT_HERC2P3': 0.00352859052341586, 'ALT_CNA_KIRREL3': 0.0035412901438265816, 'ALT_MUT_USH2A': 0.0035422119149212594, 'ALT_MUT_FRMPD4': 0.0035645799888024627, 'ALT_CNA_SEMA3E': 0.0036829085634651182, 'ALT_CNA_MTAP': 0.0037004803379150583, 'ALT_CNA_NSUN3': 0.003803665263977628, 'ALT_CNA_AGBL4-IT1': 0.003893881507110432, 'ALT_ARM4p': 0.003926684902916963, 'ALT_CNA_AGBL4': 0.0039710014479507425, 'ALT_CNA_SCG5': 0.004044837166793582, 'ALT_MUT_DNAH11': 0.004198437093881276, 'ALT_MUT_BAGE2': 0.004459455694311049, 'ALT_CNA_LUZP6': 0.004789502894069319, 'ALT_MUT_DOCK8': 0.004808008226100886, 'ALT_MUT_NPAP1': 0.005358503462614022, 'ALT_MUT_BCOR': 0.005677162096459128, 'ALT_MUT_SCN10A': 0.00627486229143229, 'preoperative_corticosteroids': 0.0081202558286874, 'headache_history': 0.008423081294805516, 'ALT_ARM20q': 0.009558508224581982, 'RAGNUM_HYPOXIA_SCORE': 0.011533348493968186, 'ALT_ARM20p': 0.012726805104915468, 'karnofsky_performance_score': 0.013359597858092093, 'ALT_MUT_NF1': 0.015907572089128946, 'ALT_MUT_IDH1': 0.01648870004109621, 'WINTER_HYPOXIA_SCORE': 0.01884896956906646, 'BUFFA_HYPOXIA_SCORE': 0.02492232937882939, 'ALT_CNA_LINC00864': 0.03395384406487762, 'eastern_cancer_oncology_group': 0.035349623655104565, 'age_at_initial_pathologic_diagnosis': 0.036083999897184804, 'year_of_initial_pathologic_diagnosis': 0.1600794939568485}
ul3 = list(uulist.keys())

# Rohit Veligeti
# December 29th 2021

# This python file uses the 251 features found before and utilizes a xgboost model and hyperparameter tuning to accurately determine what are the feature importances of the 351 selected features
# Furthermore, this result will be compared to a result taken from an optimized Random Forest model

from dataset import *
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error, r2_score

import xgboost as xgb
from sklearn.metrics import median_absolute_error
import pandas

import statistics

use_list = True
to_use_list = used_list.copy()

df = aggregrate()
df = df.sample(frac=1)

df = df[df['Outcome'] != 'Unknown']
df = df.replace("Progressive Disease", -1)
df = df.replace("Stable Disease", 0)
df = df.replace("Partial Remission/Response", 0.3)
df = df.replace("Complete Remission/Response", 1)

X = df.drop(['Outcome'], axis=1)

if use_list:
    X = X[used_list]



y = df['Outcome']

kf = KFold(n_splits=10)
kf.get_n_splits(X)

d = {}

round_loss = []

r2loss = []

for train_index, test_index in kf.split(X):

    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    X_train = X_train.apply(pandas.to_numeric)
    X_test = X_test.apply(pandas.to_numeric)
    y_train = y_train.apply(pandas.to_numeric)
    y_test = y_test.apply(pandas.to_numeric)

    # rf = RandomForestRegressor(bootstrap=True, criterion='squared_error', max_depth=None, max_features='auto', max_leaf_nodes=30, min_impurity_decrease=0, min_samples_leaf=1, min_samples_split=2, n_estimators=200, n_jobs=-1, random_state=0, verbose=0)
    rf = RandomForestRegressor()
    rf.fit(X_train, y_train)

    x = mean_squared_error(y_test, rf.predict(X_test))
    x2 = r2_score(y_test, rf.predict(X_test))
    print(x2, "X2")
    # print(x)

    fi = rf.feature_importances_
    cn = X.columns.tolist()

    for i in range(len(fi)):
        if cn[i] in d:
            d[cn[i]].append(float(fi[i]))
        else:
            d[cn[i]] = [fi[i]]

    round_loss.append(x)
    r2loss.append(x2)

average_loss = sum(round_loss) / len(round_loss)
print(average_loss)

al2 = sum(r2loss) / len(r2loss)
print(al2)

average_d = {}

df = pandas.DataFrame()

for key, value in d.items():
    average_d[key] = sum(value) / len(value)
    df[key] = value

average_d = sorted(average_d.items(), key=lambda x: x[1])

new_average_d = {}

for i in average_d:
    new_average_d[i[0]] = i[1]

print(new_average_d)

print('#----------------------------------------------------')
print(df)
df.to_csv('alterationstuff2.csv')




